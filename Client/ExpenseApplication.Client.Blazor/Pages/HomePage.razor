@attribute [Route(PageAddressConstants.HomePage)]
@attribute [Authorize]
@layout MainLayout
@inherits FluxorComponent
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDispatcher Dispatcher
@inject IState<ManagerExpensesState> ManagerExpensesState
@inject IState<AccountantExpensesState> AccountantExpensesState
@inject IDialogService DialogService
<PageTitle>Home</PageTitle>

<PageHeader Title="Home" Icon="@Icons.Material.Filled.Home" />

<AuthorizeView Roles="@CustomRoleConstants.Manager">
    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Expenses Awaiting Approval" Expanded="IsExpensesAwaitingApprovalExist">
            <ExpenseTable Title="Expense Forms"
                          Expenses="ExpensesAwaitingApproval"
                          IsRefreshButtonShow="false"
                          ReadOnly="false"
                          Actions="[ExpenseActionType.Approve, ExpenseActionType.Reject]"
                          OnApprove="OnApproveClickHandler"
                          OnReject="OnRejectClickHandler"
                          Loading="ManagerExpensesLoading" />
        </MudExpansionPanel>
    </MudExpansionPanels>
</AuthorizeView>

<AuthorizeView Roles="@CustomRoleConstants.Accountant">
    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Expenses To Be paid" Expanded="IsToBePaidExpensesExist">
            <ExpenseTable Title="Expense Forms"
                          Expenses="ToBePaidExpenses"
                          IsRefreshButtonShow="false"
                          ReadOnly="false"
                          Actions="[ExpenseActionType.Payment]"
                          OnPay="OnPayClickHandler"
                          Loading="AccountantExpensesLoading" />
        </MudExpansionPanel>
    </MudExpansionPanels>
</AuthorizeView>

@code
{
    private bool ManagerExpensesLoading => ManagerExpensesState.Value.Loading;
    private bool ManagerExpensesInitialized => ManagerExpensesState.Value.Initialized;
    private List<ExpenseDto> ExpensesAwaitingApproval => ManagerExpensesState.Value.ManagerExpenses.Where(expense => expense.ExpenseStatus is ExpenseStatus.Pending).ToList();
    private bool IsExpensesAwaitingApprovalExist => ManagerExpensesState.Value.ManagerExpenses.Any(expense => expense.ExpenseStatus is ExpenseStatus.Pending);

    private bool AccountantExpensesLoading => AccountantExpensesState.Value.Loading;
    private bool AccountantExpensesInitialized => AccountantExpensesState.Value.Initialized;
    private List<ExpenseDto> ToBePaidExpenses => AccountantExpensesState.Value.AccountantExpenses.Where(expense => expense.ExpenseStatus is ExpenseStatus.Approved).ToList();
    private bool IsToBePaidExpensesExist => AccountantExpensesState.Value.AccountantExpenses.Any(expense => expense.ExpenseStatus is ExpenseStatus.Approved);

    private string? _userRoles;
    private readonly CancellationTokenSource _cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userRoles = authenticationState?.User?.Claims?.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;

        if (_userRoles?.Contains(CustomRoleConstants.Manager) is true && !ManagerExpensesInitialized)
        {
            Dispatcher.Dispatch(new ManagerExpensesActions.LoadManagerExpensesAction(new ExpenseRequestFilterDto(), _cancellationTokenSource.Token));
        }

        if (_userRoles?.Contains(CustomRoleConstants.Accountant) is true && !AccountantExpensesInitialized)
        {
            Dispatcher.Dispatch(new AccountantExpensesActions.LoadAccountantExpensesAction(new ExpenseRequestFilterDto(), _cancellationTokenSource.Token));
        }

        await base.OnInitializedAsync();
    }

    private async Task OnApproveClickHandler(ExpenseDto expense)
    {
        var addCommentsDialogParameters = new DialogParameters<AddCommentsDialog>
        {
            { addCommentsDialog => addCommentsDialog.Content, "Please add comment to approve the expense" },
        };
        var addCommentsDialogReference = await DialogService.ShowAsync<AddCommentsDialog>("Approve", addCommentsDialogParameters);
        var addCommentsDialogResult = await addCommentsDialogReference.GetReturnValueAsync<(bool, string?)?>();
        if (addCommentsDialogResult?.Item1 is true)
        {
            Dispatcher.Dispatch(new ManagerExpensesActions.ApproveExpenseAction(
                new ApproveExpenseFormDto
                    {
                        ExpenseId = expense.Id,
                        Comments = addCommentsDialogResult.Value.Item2
                    },
                _cancellationTokenSource.Token));
        }
    }

    private async Task OnRejectClickHandler(ExpenseDto expense)
    {
        var addCommentsDialogParameters = new DialogParameters<AddCommentsDialog>
        {
            { addCommentsDialog => addCommentsDialog.Content, "Please add comment to reject the expense" },
            { addCommentsDialog => addCommentsDialog.IsRequired, true },
            { addCommentsDialog => addCommentsDialog.RequiredError, "Rejection reasons is required!" },
        };
        var addCommentsDialogReference = await DialogService.ShowAsync<AddCommentsDialog>("Reject", addCommentsDialogParameters);
        var addCommentsDialogResult = await addCommentsDialogReference.GetReturnValueAsync<(bool, string)?>();
        if (addCommentsDialogResult?.Item1 is true)
        {
            Dispatcher.Dispatch(new ManagerExpensesActions.RejectExpenseAction(
                new RejectExpenseFormDto
                    {
                        ExpenseId = expense.Id,
                        Comments = addCommentsDialogResult.Value.Item2
                    },
                _cancellationTokenSource.Token));
        }
    }

    private async Task OnPayClickHandler(ExpenseDto expense)
    {
        var addCommentsDialogParameters = new DialogParameters<AddCommentsDialog>
        {
            { addCommentsDialog => addCommentsDialog.Content, "Please add comment to payment the expense" },
        };
        var addCommentsDialogReference = await DialogService.ShowAsync<AddCommentsDialog>("Make Payment", addCommentsDialogParameters);
        var addCommentsDialogResult = await addCommentsDialogReference.GetReturnValueAsync<(bool, string?)?>();
        if (addCommentsDialogResult?.Item1 is true)
        {
            Dispatcher.Dispatch(new AccountantExpensesActions.PayExpenseAction(
                new PayExpenseFormDto
                    {
                        ExpenseId = expense.Id,
                        Comments = addCommentsDialogResult.Value.Item2
                    },
                _cancellationTokenSource.Token));
        }
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
        return base.DisposeAsyncCore(disposing);
    }
}