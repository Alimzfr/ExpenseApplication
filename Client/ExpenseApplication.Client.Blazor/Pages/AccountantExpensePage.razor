@attribute [Route(PageAddressConstants.AccountantExpensesPage)]
@attribute [Authorize(Roles = CustomRoleConstants.Accountant)]
@layout MainLayout
@inherits FluxorComponent
@inject IState<AccountantExpensesState> AccountantExpensesState
@inject IDispatcher Dispatcher
@inject IDialogService DialogService
<PageTitle>Expenses</PageTitle>

<PageHeader Title="Expenses" Icon="@Icons.Material.Filled.CurrencyExchange" />

<MudExpansionPanels Class="mb-4">
    <MudExpansionPanel Text="Filter">
        <ExpenseTableFilterForm ExpenseRequestFilter="ExpenseRequestFilter" OnSubmit="OnExpenseTableFilterFormSubmitHandler" />
    </MudExpansionPanel>
</MudExpansionPanels>

<ExpenseTable Title="Expense Forms"
              Expenses="AccountantExpenses"
              IsActionColumnShow="true"
              Actions="new[] { ExpenseActionType.Payment }"
              OnPay="OnPayClickHandler"
              IsRefreshButtonShow="true"
              OnRefresh="OnRefreshClickHandler"
              Loading="AccountantExpensesLoading" />

@code {
    private bool AccountantExpensesLoading => AccountantExpensesState.Value.Loading;
    private bool AccountantExpensesInitialized => AccountantExpensesState.Value.Initialized;
    private List<ExpenseDto> AccountantExpenses => AccountantExpensesState.Value.AccountantExpenses;
    private ExpenseRequestFilterDto ExpenseRequestFilter => AccountantExpensesState.Value.ExpenseRequestFilter;

    private readonly CancellationTokenSource cancellationTokenSource = new();

    protected override void OnInitialized()
    {
        if (!AccountantExpensesInitialized)
        {
            Dispatcher.Dispatch(new AccountantExpensesActions.LoadAccountantExpensesAction(ExpenseRequestFilter, cancellationTokenSource.Token));
        }

        base.OnInitialized();
    }

    private async Task OnPayClickHandler(ExpenseDto expense)
    {
        var addCommentsDialogParameters = new DialogParameters<AddCommentsDialog>
        {
            { addCommentsDialog => addCommentsDialog.Content, "Please add comment to payment the expense" },
        };
        var addCommentsDialogReference = await DialogService.ShowAsync<AddCommentsDialog>("Make Payment", addCommentsDialogParameters);
        var addCommentsDialogResult = await addCommentsDialogReference.GetReturnValueAsync<(bool, string?)?>();
        if (addCommentsDialogResult?.Item1 is true)
        {
            Dispatcher.Dispatch(new AccountantExpensesActions.PayExpenseAction(
                new PayExpenseFormDto
                    {
                        ExpenseId = expense.Id,
                        Comments = addCommentsDialogResult.Value.Item2
                    },
                cancellationTokenSource.Token));
        }
    }

    private void OnExpenseTableFilterFormSubmitHandler(ExpenseRequestFilterDto expenseRequestFilter)
    {
        Dispatcher.Dispatch(new AccountantExpensesActions.LoadAccountantExpensesAction(expenseRequestFilter, cancellationTokenSource.Token));
    }

    private void OnRefreshClickHandler()
    {
        Dispatcher.Dispatch(new AccountantExpensesActions.LoadAccountantExpensesAction(ExpenseRequestFilter, cancellationTokenSource.Token));
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        cancellationTokenSource.Cancel();
        return base.DisposeAsyncCore(disposing);
    }
}