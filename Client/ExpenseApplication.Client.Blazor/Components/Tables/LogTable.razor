<div>
    <MudDataGrid T="LogDto"
                 Items="Logs"
                 Loading="Loading"
                 RowsPerPage="10"
                 Striped="false"
                 Hover="true"
                 SortMode="SortMode.None"
                 Breakpoint="Breakpoint.Sm">
        <ToolBarContent>
            <MudText Typo="Typo.body1">@Title</MudText>
            <MudSpacer />
            @if (IsRefreshButtonShow)
            {
                <RefreshButton OnRefresh="OnRefreshHandler" />
            }
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="LogDto" />
            <PropertyColumn Title="Id" Property="log => log.Id" />
            <PropertyColumn Title="Level" Property="log => log.Level" />
            <PropertyColumn Title="Time Stamp" Property="@(log => (log.TimeStamp != null) ? log.TimeStamp.Value.ToString("f") : string.Empty)" />
            <PropertyColumn Title="Message" Property="log => log.Message" />
        </Columns>
        <ChildRowContent>
            <JsonViewer JsonData="@context.Item.LogEvent" />
        </ChildRowContent>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <PagerContent>
            <MudPagination Disabled="Loading"
                           ShowFirstButton="true"
                           ShowLastButton="true"
                           SelectedChanged="OnPageSelectedChangedHandler"
                           Count="@(PagingInformation is { TotalCount: > 0, PageSize: > 0 } ? ((PagingInformation.TotalCount + PagingInformation.PageSize - 1) / PagingInformation.PageSize): 0)"
                           Class="p-4" />
        </PagerContent>
    </MudDataGrid>
</div>

@code {
    [Parameter, EditorRequired]
    public required string Title { get; set; }

    [Parameter, EditorRequired]
    public required List<LogDto> Logs { get; set; }

    [Parameter, EditorRequired]
    public required PagingInformationDto PagingInformation { get; set; }

    [Parameter]
    public bool Loading { get; set; } = false;

    [Parameter]
    public bool IsRefreshButtonShow { get; set; } = false;

    [Parameter]
    public EventCallback OnRefresh { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    private async Task OnRefreshHandler()
    {
        await OnRefresh.InvokeAsync();
    }

    private async Task OnPageSelectedChangedHandler(int pageNumber)
    {
        await OnPageChanged.InvokeAsync(pageNumber);
    }
}
