@inject IDialogService DialogService

<MudDataGrid T="ExpenseItemDto"
             Items="ExpenseItems"
             RowsPerPage="10"
             Striped="false"
             Hover="true"
             SortMode="SortMode.None"
             Breakpoint="Breakpoint.Sm">
    <ToolBarContent>
        <MudText Typo="Typo.body1">@Title</MudText>
        <MudSpacer />
        @if (!ReadOnly)
        {
            <MudTooltip Text="Add">
                <MudIconButton ButtonType="ButtonType.Button"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               Size="Size.Small"
                               Icon="@Icons.Material.Filled.Add"
                               OnClick="OnAddClickHandler" />
            </MudTooltip>
        }
    </ToolBarContent>
    <Columns>
        <PropertyColumn Title="Occurrence date" Property="expense => expense.OccurrenceDateTime" Editable="true" />
        <PropertyColumn Title="Amount" Property="@(expense => expense.Amount)" />
        <PropertyColumn Title="Purpose" Property="expense => expense.Purpose" />
        <TemplateColumn Title="Actions" Hidden="ReadOnly">
            <CellTemplate>
                <div>
                    <MudTooltip Text="Edit">
                        <MudIconButton ButtonType="ButtonType.Button"
                                       Variant="Variant.Filled"
                                       Color="Color.Warning"
                                       Size="Size.Small"
                                       Icon="@Icons.Material.Filled.Edit"
                                       OnClick="() => OnEditClickHandler(context.Item)"/>
                    </MudTooltip>
                    <MudTooltip Text="Remove">
                        <MudIconButton ButtonType="ButtonType.Button"
                                       Variant="Variant.Filled"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       Icon="@Icons.Material.Filled.Delete"
                                       OnClick="() => OnRemoveClickHandler(context.Item)"/>
                    </MudTooltip>
                </div>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
</MudDataGrid>

@code {
    [Parameter, EditorRequired]
    public required string Title { get; set; }

    [Parameter, EditorRequired]
    public List<ExpenseItemDto> ExpenseItems { get; set; } = [];

    [Parameter, EditorRequired]
    public CurrencyType CurrencyType { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public EventCallback<ExpenseItemDto> OnAdd { get; set; }

    [Parameter]
    public EventCallback<ExpenseItemDto> OnEdit { get; set; }

    [Parameter]
    public EventCallback<ExpenseItemDto> OnRemove { get; set; }

    private async Task OnAddClickHandler()
    {
        var addExpenseItemDialogParameters = new DialogParameters<ExpenseItemDialog>
        {
            { addExpenseItemDialog => addExpenseItemDialog.CurrencyType, CurrencyType },
            { addExpenseItemDialog => addExpenseItemDialog.ExpenseItem, new ExpenseItemDto() }
        };
        var addExpenseItemDialogReference = await DialogService.ShowAsync<ExpenseItemDialog>("Add Expense Item", addExpenseItemDialogParameters);
        var addExpenseItemDialogResult = await addExpenseItemDialogReference.GetReturnValueAsync<ExpenseItemDto?>();
        if (addExpenseItemDialogResult is not null)
        {
            await OnAdd.InvokeAsync(addExpenseItemDialogResult);
        }
    }

    private async Task OnEditClickHandler(ExpenseItemDto expenseItem)
    {
        var editExpenseItemDialogParameters = new DialogParameters<ExpenseItemDialog>
        {
            { editExpenseItemDialog => editExpenseItemDialog.CurrencyType, CurrencyType },
            { editExpenseItemDialog => editExpenseItemDialog.ExpenseItem, expenseItem }
        };
        var editExpenseItemDialogReference = await DialogService.ShowAsync<ExpenseItemDialog>("Edit Expense Item", editExpenseItemDialogParameters);
        var editExpenseItemDialogResult = await editExpenseItemDialogReference.GetReturnValueAsync<ExpenseItemDto?>();
        if (editExpenseItemDialogResult is not null)
        {
            await OnEdit.InvokeAsync(editExpenseItemDialogResult);
        }
    }

    private async Task OnRemoveClickHandler(ExpenseItemDto? expenseItem)
    {
        await OnRemove.InvokeAsync(expenseItem);
    }
}
